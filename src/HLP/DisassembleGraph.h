#pragma once

#include <memory>
#include <set>
#include <string>
#include <vector>

#include "PuzzleConfig.h"

class DisassembleGraph
{
public:
    // puzzle is either generated by the PuzzleGenerator or imported from a puzzle file
    // all data will be cleared before each generation / import
    bool ImportPuzzle(const std::string &puzzleFilePath);

    // config operations
    void RenderConfig(int configID, Shader &shader, VertexBuffer &voxelModel);
    void CalculateNeighborConfigs(int configID, std::vector<std::shared_ptr<PuzzleConfig>> &neighborConfigs);
    void BuildKernelDisassemblyGraph(int configID = 0);

    // queries
    PuzzleConfig &GetPuzzleConfig(int configID);
    int GetPuzzleConfigNum() const;

    // tests
    void Test_AddAllNeighborConfigs(int configID); // this action doesn't maintain edges!

private:
    std::vector<std::set<int>> _GraphEdges;
    std::vector<std::shared_ptr<PuzzleConfig>> _GraphNodes;
};
